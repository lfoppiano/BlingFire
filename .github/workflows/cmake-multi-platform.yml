# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
#          - os: ubuntu-22.04
#            c_compiler: clang
#            cpp_compiler: clang++
          - os: ubuntu-24.04-arm
            c_compiler: gcc
            cpp_compiler: g++
#          - os: ubuntu-24.04-arm
#            c_compiler: clang
#            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
#          - os: macos-latest
#            c_compiler: clang
#            cpp_compiler: clang++
          - os: macos-13
            c_compiler: gcc
            cpp_compiler: g++
#          - os: macos-13
#            c_compiler: clang
#            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
#          - os: windows-latest
#            c_compiler: clang
          - os: ubuntu-22.04
            c_compiler: cl
          - os: ubuntu-24.04-arm
            c_compiler: cl
          - os: macos-13
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set OS and ARCH variables
      run: |
        echo "OS=$(if [ ${{ runner.os }} == 'Linux' ]; then echo 'linux'; elif [ ${{ runner.os }} == 'Windows' ]; then echo 'win'; elif [ ${{ runner.os }} == 'macOS' ]; then echo 'mac'; fi)" >> $GITHUB_ENV
        echo "LIB_EXTENSION=$(if [ ${{ runner.os }} == 'Linux' ]; then echo 'so'; elif [ ${{ runner.os }} == 'Windows' ]; then echo 'dll'; elif [ ${{ runner.os }} == 'macOS' ]; then echo 'dylib'; fi)" >> $GITHUB_ENV
        echo "ARCH=${{ runner.arch == 'X64' && '64' || 'arm64' }}" >> $GITHUB_ENV
      shell: bash

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: > 
        cmake --build ${{ steps.strings.outputs.build-output-dir }} 
        --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Copy lib
      run: |
        mkdir -p output/blingfire/${{ env.OS }}/${{ env.ARCH }}
        cp ${{ steps.strings.outputs.build-output-dir }}/*blingfiretokdll.${{env.LIB_EXTENSION}} output/blingfire/${{ env.OS }}/${{ env.ARCH }}

    - name: Save Lib
      uses: actions/upload-artifact@v4
      with:
        name: blingfire-bin-${{ env.OS }}-${{ env.ARCH }}
        path: output/blingfire


  assemble-artifact:
    needs: [ build ]
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output
      - name: Move contents to output directory
        run: |
          for dir in output/*; do
            if [ -d "$dir" ]; then
              rsync -a "$dir"/* output/
              rm -rf "$dir"
            fi
          done
        shell: bash
      - name: Display structure of downloaded files
        run: ls -R
      - name: Get the revision ID
        id: extract_rev_id
        run: |
          SHORT_COMMIT_ID=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "short_commit_id=${SHORT_COMMIT_ID}" >> $GITHUB_OUTPUT
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: blingfire-bin-all-${{ steps.extract_rev_id.outputs.short_commit_id }}
          path: output